import axios, {
  AxiosError,
  AxiosInstance,
  AxiosResponse,
  InternalAxiosRequestConfig,
} from "axios";

/**
 * Helper: L·∫•y access_token ∆∞u ti√™n t·ª´ localStorage (gi·ªØ ƒë∆∞·ª£c gi·ªØa tabs),
 * fallback sang sessionStorage n·∫øu kh√¥ng c√≥.
 */
const getAccessToken = (): string | null => {
  try {
    const authority = process.env.NEXT_PUBLIC_COGNITO_AUTHORITY!;
    const clientId = process.env.NEXT_PUBLIC_COGNITO_CLIENT_ID!;
    const key = `oidc.user:${authority}:${clientId}`;

    // ∆Øu ti√™n localStorage ƒë·ªÉ gi·ªØ ƒëƒÉng nh·∫≠p gi·ªØa tabs
    const userJson =
      (typeof window !== "undefined" && window.localStorage.getItem(key)) ||
      (typeof window !== "undefined" && window.sessionStorage.getItem(key));
    if (!userJson) return null;

    const user = JSON.parse(userJson);
    return user?.access_token || null;
  } catch (err) {
    console.error("‚ùå Error reading access token:", err);
    return null;
  }
};

/**
 * Helper: L·∫•y id_token ƒë·ªÉ BE c√≥ th·ªÉ decode l·∫•y email v√† user info
 */
const getIdToken = (): string | null => {
  try {
    const authority = process.env.NEXT_PUBLIC_COGNITO_AUTHORITY!;
    const clientId = process.env.NEXT_PUBLIC_COGNITO_CLIENT_ID!;
    const key = `oidc.user:${authority}:${clientId}`;

    // ∆Øu ti√™n localStorage ƒë·ªÉ gi·ªØ ƒëƒÉng nh·∫≠p gi·ªØa tabs
    const userJson =
      (typeof window !== "undefined" && window.localStorage.getItem(key)) ||
      (typeof window !== "undefined" && window.sessionStorage.getItem(key));
    if (!userJson) return null;

    const user = JSON.parse(userJson);
    return user?.id_token || null;
  } catch (err) {
    console.error("‚ùå Error reading id token:", err);
    return null;
  }
};

/**
 * T·∫°o Axios instance m·∫∑c ƒë·ªãnh
 */
const axiosInstance: AxiosInstance = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_BASE_URL,
  timeout: 30000, // TƒÉng timeout t·ª´ 10s l√™n 30s
  headers: {
    "Content-Type": "application/json",
  },
});

/**
 * üü¢ Request Interceptor: G·∫Øn token v√†o header Authorization
 * - access_token: d√πng ƒë·ªÉ authorize API calls
 * - id_token: g·ª≠i k√®m ƒë·ªÉ BE c√≥ th·ªÉ decode l·∫•y email v√† user info ƒë·∫ßy ƒë·ªß
 */
axiosInstance.interceptors.request.use(
  (config: InternalAxiosRequestConfig) => {
    if (typeof window !== "undefined") {
      const accessToken = getAccessToken();
      const idToken = getIdToken();
      
      if (accessToken) {
        config.headers = config.headers ?? {};
        config.headers.Authorization = `Bearer ${accessToken}`;
      }
      
      // G·ª≠i id_token trong custom header ƒë·ªÉ BE decode l·∫•y email v√† user info
      if (idToken) {
        config.headers = config.headers ?? {};
        config.headers["X-ID-Token"] = idToken;
      }

      config.headers["ngrok-skip-browser-warning"] = "true";
    }
    return config;
  },
  (error: AxiosError) => Promise.reject(error)
);

/**
 * üî¥ Response Interceptor: X·ª≠ l√Ω l·ªói 401, 403, network
 */
axiosInstance.interceptors.response.use(
  (response: AxiosResponse) => response,
  (error: AxiosError) => {
    if (error.response) {
      const status = error.response.status;

      if (status === 401 && typeof window !== "undefined") {
        console.warn("‚ö†Ô∏è Token expired or invalid, redirecting to login");
        sessionStorage.clear();
        window.location.href = "/login";
      }

      console.error("API Error:", error.response.data);
    } else {
      console.error("Network Error:", error.message);
    }

    return Promise.reject(error);
  }
);

export default axiosInstance;
