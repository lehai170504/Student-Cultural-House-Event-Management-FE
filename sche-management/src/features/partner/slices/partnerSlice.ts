// src/features/partner/slices/partnerSlice.ts

import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import type { Partner, CreatePartner } from "@/features/partner/types/partner";
// âœ… Import thunk má»›i
import { fetchAllPartners, createPartner, fetchPartnerById } from "../thunks/partnerThunks";

interface PartnerState {
Â  list: Partner[];
Â  loadingList: boolean;
Â  saving: boolean;
Â  error: string | null;
  // ðŸ’¡ STATE Má»šI
  selectedPartner: Partner | null;
  loadingDetail: boolean;
}

const initialState: PartnerState = {
Â  list: [],
Â  loadingList: false,
Â  saving: false,
Â  error: null,
  // ðŸ’¡ KHá»žI Táº O STATE Má»šI
  selectedPartner: null,
  loadingDetail: false,
};

const partnerSlice = createSlice({
Â  name: "partner",
Â  initialState,
Â  reducers: {
Â  Â  clearError: (state) => {
Â  Â  Â  state.error = null;
Â  Â  },
    // ðŸ’¡ REDUCER Má»šI: XÃ³a chi tiáº¿t khi chuyá»ƒn trang/Ä‘Ã³ng modal
    clearSelectedPartner: (state) => {
      state.selectedPartner = null;
    }
Â  },
Â  extraReducers: (builder) => {
Â  Â  builder
Â  Â  Â  // ðŸ”¹ Láº¥y danh sÃ¡ch partner (fetchAllPartners)
Â  Â  Â  .addCase(fetchAllPartners.pending, (state) => {
Â  Â  Â  Â  state.loadingList = true;
Â  Â  Â  Â  state.error = null; // XÃ³a lá»—i cÅ© khi báº¯t Ä‘áº§u táº£i
Â  Â  Â  })
Â  Â  Â  .addCase(fetchAllPartners.fulfilled, (state, action: PayloadAction<Partner[]>) => {
Â  Â  Â  Â  state.loadingList = false;
Â  Â  Â  Â  state.list = action.payload || [];
Â  Â  Â  })
Â  Â  Â  .addCase(fetchAllPartners.rejected, (state, action) => {
Â  Â  Â  Â  state.loadingList = false;
Â  Â  Â  Â  // Láº¥y giÃ¡ trá»‹ lá»—i tá»« rejectValue
Â  Â  Â  Â  state.error = (action.payload as string) || action.error.message || "KhÃ´ng thá»ƒ táº£i dá»¯ liá»‡u Ä‘á»‘i tÃ¡c.";
Â  Â  Â  })

Â  Â  Â  // ðŸ”¹ Táº¡o má»›i partner (createPartner)
Â  Â  Â  .addCase(createPartner.pending, (state) => {
Â  Â  Â  Â  state.saving = true;
Â  Â  Â  Â  state.error = null; // XÃ³a lá»—i cÅ© khi báº¯t Ä‘áº§u lÆ°u
Â  Â  Â  })
Â  Â  Â  .addCase(createPartner.fulfilled, (state, action: PayloadAction<Partner>) => {
Â  Â  Â  Â  state.saving = false;
Â  Â  Â  Â  // ThÃªm Ä‘á»‘i tÃ¡c má»›i vÃ o Ä‘áº§u danh sÃ¡ch
Â  Â  Â  Â  state.list.unshift(action.payload); 
Â  Â  Â  })
Â  Â  Â  .addCase(createPartner.rejected, (state, action) => {
Â  Â  Â  Â  state.saving = false;
Â  Â  Â  Â  // Láº¥y giÃ¡ trá»‹ lá»—i tá»« rejectValue
Â  Â  Â  Â  state.error = (action.payload as string) || action.error.message || "KhÃ´ng thá»ƒ táº¡o Ä‘á»‘i tÃ¡c má»›i.";
Â  Â  Â  })
      
      // ðŸ’¡ Xá»­ lÃ½ Láº¥y chi tiáº¿t partner (fetchPartnerById)
      .addCase(fetchPartnerById.pending, (state) => {
          state.loadingDetail = true;
          state.selectedPartner = null; 
          state.error = null;
      })
      .addCase(fetchPartnerById.fulfilled, (state, action: PayloadAction<Partner>) => {
          state.loadingDetail = false;
          state.selectedPartner = action.payload; // LÆ°u chi tiáº¿t Ä‘á»‘i tÃ¡c
      })
      .addCase(fetchPartnerById.rejected, (state, action) => {
          state.loadingDetail = false;
          state.selectedPartner = null;
          state.error = (action.payload as string) || action.error.message || "KhÃ´ng thá»ƒ táº£i chi tiáº¿t Ä‘á»‘i tÃ¡c.";
      });
Â  },
});

export const { clearError, clearSelectedPartner } = partnerSlice.actions; // âœ… Export action má»›i
export default partnerSlice.reducer;