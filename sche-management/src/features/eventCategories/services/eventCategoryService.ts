import axiosInstance from "@/config/axiosInstance";
import {
  EventCategory,
  CreateEventCategory,
  UpdateEventCategory,
  EventCategoryDetail,
} from "@/features/eventCategories/types/eventCategories";

const endpoint = "/event-categories";

export const eventCategoryService = {
  /** üîπ L·∫•y t·∫•t c·∫£ danh m·ª•c s·ª± ki·ªán */
  async getAll(): Promise<EventCategory[]> {
    try {
      console.log("üì° [getAll] G·ªçi API /event-categories...");
      const res = await axiosInstance.get<EventCategory[]>(endpoint);
      console.log("‚úÖ [getAll] API tr·∫£ v·ªÅ:", res.data);
      return res.data;
    } catch (error) {
      console.error(
        "‚ùå [getAll] L·ªói khi l·∫•y danh s√°ch danh m·ª•c s·ª± ki·ªán:",
        error
      );
      throw error;
    }
  },

  /** üîπ L·∫•y chi ti·∫øt danh m·ª•c s·ª± ki·ªán theo ID */
  async getById(id: number): Promise<EventCategoryDetail> {
    try {
      const res = await axiosInstance.get<EventCategoryDetail>(
        `${endpoint}/${id}`
      );
      return res.data;
    } catch (error) {
      console.error(
        `‚ùå [getById] L·ªói khi l·∫•y danh m·ª•c s·ª± ki·ªán ID ${id}:`,
        error
      );
      throw error;
    }
  },

  /** üîπ T·∫°o m·ªõi danh m·ª•c s·ª± ki·ªán */
  async create(data: CreateEventCategory): Promise<EventCategoryDetail> {
    try {
      const res = await axiosInstance.post<EventCategoryDetail>(endpoint, data);
      return res.data;
    } catch (error) {
      console.error("‚ùå [create] L·ªói khi t·∫°o danh m·ª•c s·ª± ki·ªán:", error);
      throw error;
    }
  },

  /** üîπ C·∫≠p nh·∫≠t danh m·ª•c s·ª± ki·ªán theo ID */
  async update(
    id: number,
    data: UpdateEventCategory
  ): Promise<EventCategoryDetail> {
    try {
      const res = await axiosInstance.put<EventCategoryDetail>(
        `${endpoint}/${id}`,
        data
      );
      return res.data;
    } catch (error) {
      console.error(
        `‚ùå [update] L·ªói khi c·∫≠p nh·∫≠t danh m·ª•c s·ª± ki·ªán ID ${id}:`,
        error
      );
      throw error;
    }
  },

  /** üîπ Xo√° danh m·ª•c s·ª± ki·ªán theo ID */
  async delete(id: number): Promise<void> {
    try {
      await axiosInstance.delete(`${endpoint}/${id}`);
    } catch (error) {
      console.error(
        `‚ùå [delete] L·ªói khi xo√° danh m·ª•c s·ª± ki·ªán ID ${id}:`,
        error
      );
      throw error;
    }
  },
};
