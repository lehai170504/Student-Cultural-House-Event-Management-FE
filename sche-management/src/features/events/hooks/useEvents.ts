"use client";

import { useCallback, useEffect } from "react";
import { useAppDispatch, useAppSelector } from "@/lib/hooks";
import {
  fetchAllEvents,
  fetchEventById,
  createEvent,
  updateEvent,
  deleteEvent,
} from "../thunks/eventThunks";
import { resetDetail, clearError, resetPagination } from "../slices/eventSlice";
import { fetchAllEventCategories } from "@/features/eventCategories/thunks/eventCategoryThunks";

import type { CreateEvent, UpdateEvent } from "../types/events";

export const useEvents = () => {
  const dispatch = useAppDispatch();

  // TH√äM C√ÅC TR∆Ø·ªúNG PH√ÇN TRANG V√ÄO DESTRUCTURING
  const {
    list,
    detail,
    loadingList,
    loadingDetail,
    saving,
    deleting,
    error,
    currentPage, // Th√™m
    totalElements, // Th√™m
    totalPages, // Th√™m
    pageSize, // Th√™m
    isLastPage, // Th√™m
  } = useAppSelector((state) => state.event);

  const { list: categories = [], loadingList: loadingCategories } =
    useAppSelector((state) => state.eventCategory);

  /** üî∏ L·∫•y danh s√°ch t·∫•t c·∫£ events (c√≥ h·ªó tr·ª£ params cho ph√¢n trang/filter) */
  const loadAll = useCallback(
    async (params?: Record<string, any>) => {
      await dispatch(fetchAllEvents(params));
    },
    [dispatch]
  );

  /** üî∏ L·∫•y chi ti·∫øt event */
  const loadDetail = useCallback(
    async (id: number) => {
      await dispatch(fetchEventById(id));
    },
    [dispatch]
  );

  /** üî∏ T·∫°o m·ªõi event */
  const createNewEvent = useCallback(
    async (data: CreateEvent) => {
      const result = await dispatch(createEvent(data));
      return result;
    },
    [dispatch]
  );

  /** üî∏ C·∫≠p nh·∫≠t event */
  const updateExistingEvent = useCallback(
    async (id: number, data: UpdateEvent) => {
      const result = await dispatch(updateEvent({ id, data }));
      return result;
    },
    [dispatch]
  );

  /** üî∏ Xo√° event */
  const deleteEventById = useCallback(
    async (id: number) => {
      const result = await dispatch(deleteEvent(id));
      return result;
    },
    [dispatch]
  );

  /** üî∏ Reset chi ti·∫øt */
  const resetEventDetail = useCallback(() => {
    dispatch(resetDetail());
  }, [dispatch]);

  /** üî∏ Reset Pagination (danh s√°ch v√† metadata ph√¢n trang) */
  const resetEventPagination = useCallback(() => {
    dispatch(resetPagination());
  }, [dispatch]);

  /** üî∏ Xo√° l·ªói */
  const clearEventError = useCallback(() => {
    dispatch(clearError());
  }, [dispatch]);

  /** üî∏ Load danh m·ª•c lu√¥n */
  const loadCategories = useCallback(async () => {
    await dispatch(fetchAllEventCategories());
  }, [dispatch]);

  /** üî∏ T·ª± ƒë·ªông load events + categories khi mount */
  useEffect(() => {
    loadAll();
    loadCategories();
  }, [loadAll, loadCategories]);

  return {
    // D·ªÆ LI·ªÜU S·ª∞ KI·ªÜN
    list,
    detail,
    error,
    eventCategories: categories,

    // TR·∫†NG TH√ÅI LOADING
    loadingList,
    loadingDetail,
    saving,
    deleting,
    loadingCategories,

    // TR·∫†NG TH√ÅI PH√ÇN TRANG (M·ªöI)
    currentPage,
    totalElements,
    totalPages,
    pageSize,
    isLastPage,

    // ACTIONS
    loadAll,
    loadDetail,
    createNewEvent,
    updateExistingEvent,
    deleteEventById,
    resetEventDetail,
    resetEventPagination, // Th√™m action reset pagination
    clearEventError,
  };
};
