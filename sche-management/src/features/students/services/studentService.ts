import axiosInstance from "@/config/axiosInstance";
import { 
  UniversityUser, 
  StudentResponse,
  StudentProfile,
  CompleteProfileRequest,
  UpdateProfileRequest
} from "../types/student";

const endpoint = "/admin/students";

export interface FetchUniversityUsersParams {
  page?: number;
  size?: number;
  sort?: string;
  universityId?: number;
  search?: string;
}

export const studentService = {
  /** üîπ L·∫•y danh s√°ch University Users theo paging */
  async getAll(
    params?: FetchUniversityUsersParams
  ): Promise<UniversityUser[]> {
    try {
      const res = await axiosInstance.get<any>(endpoint, {
        params,
      });

      // BE gi·ªù tr·∫£ v·ªÅ data tr·ª±c ti·∫øp, kh√¥ng wrap trong { data: {...} }
      const responseData = res.data?.data ?? res.data;
      return responseData?.content ?? responseData ?? [];
    } catch (error) {
      console.error(
        "‚ùå [getAll] Error fetching university users:",
        error
      );
      throw error;
    }
  },

  /** üîπ C·∫≠p nh·∫≠t tr·∫°ng th√°i University User (Sinh vi√™n) */
  async updateStatus(
    id: number,
    status: "ACTIVE" | "INACTIVE"
  ): Promise<UniversityUser> {
    try {
      const res = await axiosInstance.patch<UniversityUser>(
        `${endpoint}/${id}/status`,
        { status }
      );
      return res.data;
    } catch (error) {
      console.error(
        `‚ùå [updateStatus] Error updating University User status id=${id}:`,
        error
      );
      throw error;
    }
  },

  /** üîπ L·∫•y th√¥ng tin profile c·ªßa student hi·ªán t·∫°i */
  async getProfile(): Promise<StudentProfile> {
    try {
      // API endpoint: /me (baseURL ƒë√£ c√≥ /api/v1)
      // Response c√≥ th·ªÉ l√† { data: {...} } ho·∫∑c {...} tr·ª±c ti·∫øp
      const res = await axiosInstance.get<any>("/me");
      
      // X·ª≠ l√Ω c·∫£ 2 tr∆∞·ªùng h·ª£p response format
      const apiData = res?.data?.data ?? res?.data;
      
      // Map response to StudentProfile type
      const profile: StudentProfile = {
        id: apiData.id,
        universityId: apiData.universityId,
        universityName: apiData.universityName,
        fullName: apiData.fullName,
        phoneNumber: apiData.phoneNumber,
        email: apiData.email || null,
        avatarUrl: apiData.avatarUrl || null,
        status: apiData.status || "ACTIVE",
        createdAt: apiData.createdAt || null,
      };
      
      return profile;
    } catch (error) {
      console.error("‚ùå [getProfile] L·ªói khi l·∫•y th√¥ng tin profile:", error);
      throw error;
    }
  },

  /** üîπ Ho√†n thi·ªán th√¥ng tin profile c·ªßa student */
  async completeProfile(data: CompleteProfileRequest): Promise<StudentProfile> {
    try {
      const res = await axiosInstance.post<any>(
        "/students/me/complete-profile",
        data
      );
      // BE tr·∫£ v·ªÅ data tr·ª±c ti·∫øp ho·∫∑c wrap trong { data: {...} }
      const apiData = res.data?.data ?? res.data;
      
      return {
        id: apiData.id,
        universityId: apiData.universityId,
        universityName: apiData.universityName,
        fullName: apiData.fullName,
        phoneNumber: apiData.phoneNumber,
        email: apiData.email || null,
        avatarUrl: apiData.avatarUrl || null,
        status: apiData.status || "ACTIVE",
        createdAt: apiData.createdAt || null,
      };
    } catch (error) {
      console.error("‚ùå [completeProfile] L·ªói khi ho√†n thi·ªán profile:", error);
      throw error;
    }
  },

  /** üîπ C·∫≠p nh·∫≠t th√¥ng tin profile c·ªßa student */
  async updateProfile(data: UpdateProfileRequest): Promise<StudentProfile> {
    try {
      const res = await axiosInstance.put<any>(
        "/students/me",
        data
      );
      // BE tr·∫£ v·ªÅ data tr·ª±c ti·∫øp ho·∫∑c wrap trong { data: {...} }
      const apiData = res.data?.data ?? res.data;
      
      return {
        id: apiData.id,
        universityId: apiData.universityId,
        universityName: apiData.universityName,
        fullName: apiData.fullName,
        phoneNumber: apiData.phoneNumber,
        email: apiData.email || null,
        avatarUrl: apiData.avatarUrl || null,
        status: apiData.status || "ACTIVE",
        createdAt: apiData.createdAt || null,
      };
    } catch (error) {
      console.error("‚ùå [updateProfile] L·ªói khi c·∫≠p nh·∫≠t profile:", error);
      throw error;
    }
  },
};