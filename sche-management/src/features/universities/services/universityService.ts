// src/features/universities/services/universityService.ts
import axiosInstance from "@/config/axiosInstance";
import {
  CreateUniversity,
  University,
  UpdateUniversity,
} from "../types/universities";

const endpoint = "/universities";
const endpoint2 = "/admin/universities";

export const universityService = {
  /** üîπ L·∫•y t·∫•t c·∫£ universities v·ªõi filter t√πy ch·ªçn */
  async getAll(params?: Record<string, any>): Promise<University[]> {
    try {
      const res = await axiosInstance.get(endpoint, { params });
      // Backend c√≥ th·ªÉ tr·∫£ v·ªÅ { status, message, data } ho·∫∑c tr·∫£ th·∫≥ng m·∫£ng
      const payload = res.data;
      const list: University[] = Array.isArray(payload)
        ? payload
        : payload?.data ?? [];
      return list;
    } catch (error) {
      console.error(
        "‚ùå [getAll] L·ªói khi l·∫•y danh s√°ch c√°c tr∆∞·ªùng ƒë·∫°i h·ªçc:",
        error
      );
      throw error;
    }
  },

  /** üîπ T·∫°o m·ªõi university */
  async create(data: CreateUniversity): Promise<University> {
    try {
      const res = await axiosInstance.post<University>(endpoint2, data);
      return res.data;
    } catch (error) {
      console.error("‚ùå [create] L·ªói khi t·∫°o university:", error);
      throw error;
    }
  },

  /** üîπ C·∫≠p nh·∫≠t university theo ID */
  async update(id: number, data: UpdateUniversity): Promise<University> {
    try {
      const res = await axiosInstance.put<University>(
        `${endpoint2}/${id}`,
        data
      );
      return res.data;
    } catch (error) {
      console.error(`‚ùå [update] L·ªói khi c·∫≠p nh·∫≠t university ID ${id}:`, error);
      throw error;
    }
  },

  /** üîπ Xo√° university theo ID */
  async delete(id: number): Promise<void> {
    try {
      await axiosInstance.delete(`${endpoint2}/${id}`);
    } catch (error) {
      console.error(`‚ùå [delete] L·ªói khi x√≥a university ID ${id}:`, error);
      throw error;
    }
  },
};
